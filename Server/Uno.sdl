#graphql
enum Color {
  RED
  BLUE
  GREEN
  YELLOW
}

interface Card {
  type: String!
  color: Color
  value: Int!
}

type NumberedCard implements Card {
  type: String!
  color: Color
  value: Int!
}

type SkipCard implements Card {
  type: String!
  color: Color
  value: Int!
}

type ReverseCard implements Card {
  type: String!
  color: Color
  value: Int!
}

type DrawTwoCard implements Card {
  type: String!
  color: Color
  value: Int!
}

type WildCard implements Card {
  type: String!
  color: Color
  value: Int!
}

type WildDrawCard implements Card {
  type: String!
  color: Color
  value: Int!
}

union AnyCard =
    NumberedCard
  | SkipCard
  | ReverseCard
  | DrawTwoCard
  | WildCard
  | WildDrawCard

type Player {
  id: Int!
  name: String!
  score: Int!
  handCount: Int
}

type ActiveRound {
  currentPlayerIndex: Int
  direction: Int
  discardTop: AnyCard
  drawPileCount: Int
}

type ActiveMatch {
  id: ID!
  pending: Boolean!
  finished: Boolean!
  winner: Player
  players: [Player!]!
  currentRound: ActiveRound
}

type PendingGame {
  id: ID!
  creator: String!
  number_of_players: Int!
  players: [String!]!
  pending: Boolean!
}

union Game = ActiveMatch | PendingGame

type Query {
  games: [ActiveMatch!]!
  game(id: ID!): ActiveMatch
  pending_games: [PendingGame!]!
  pending_game(id: ID!): PendingGame
  hand(id: ID!, player: String!): [AnyCard!]!
}

type Mutation {
  new_game(creator: String!, number_of_players: Int!): Game!
  join(id: ID!, player: String!): Game!
  draw(id: ID!, player: String!): ActiveMatch!
  playCardByIndex(id: ID!, player: String!, handIndex: Int!, chosenColor: Color): ActiveMatch!
}

type Subscription {
  active: ActiveMatch!
  pending: PendingGame!
}
